{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     block-d-i-t would result in: "node--view-mode-block-d-i-t", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     block-d-i-t listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "block-d-i-t" or "full".
 * - block-d-i-t: Flag for the block-d-i-t state. Will be true if view_mode is 'block-d-i-t'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the block-d-i-t content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

<article {{ bem("node") }}>
  <div{{ content_attributes }}>
    {% set counter = 0 %}
    {% for item in content._layout_builder[1].first %}
      {% if counter < 1 %}
        {% set tax_term_id = item.content.view_build['#rows'][0]['#rows'][0]['#row']._entity.fields.field_category.entity.field_tax_term_ident.value %}
        <div class="{{ tax_term_id }}">
          {% if node.gettype != 'page' %}
            {% set node_category = node.field_category.entity %}
            {% set tax_term_label = node_category.label %}
            <div class="tax_term_id_{{ tax_term_label }}">
              {% if tax_term_label == 'Architecture' %}
                {% set image_entity = node.field_image.entity %}
                {% set node_image_url = file_url(image_entity.uri.value) %}
                <div class="my-block" style="background-image: url('{{ node_image_url }}')">
                  <div class="header-node">
                    <div class="row-1">
                      <p>{{ node.field_category.entity.label }}</p>
                    </div>
                    <div class="row-2">
                      <p>{{ node.getTitle() }}</p>
                    </div>
                    <div class="row-3">
                      <p>{{ node.getCreatedTime()|date('F j, Y') }}</p>
                      <p>{{ '0'|t }}</p>
                      <p>{{ node.getOwner().getDisplayName() }}</p>
                    </div>
                  </div>
                </div>
                <div class="content-node">
                  {{ content["_layout_builder"][1] }}
                </div>
              {% elseif tax_term_label in ['Vogue', 'New Look', 'Style Hunter', 'Street Fashion'] %}
                <div class="header-node">
                  {{ content["_layout_builder"][0] }}
                  <div class="author-info-article">
                    {% set author = node.getOwner() %}
                    {% set author_image = author.user_picture.entity %}
                    {% if author_image %}
                      {% set author_image_url = file_url(author_image.uri.value) %}
                      <img src="{{ author_image_url }}" alt="{{ author.user_picture.alt }}">
                    {% endif %}
                    <p class="author">{{ author.getDisplayName() }}</p>
                    <p class="creation">{{ node.getCreatedTime()|date('F j, Y') }}</p>
                    <p class="cc_article">{{ content.field_comments['#items']|length  }}</p>
                  </div>
                </div>
                <div class="content-node">
                  {{ content["_layout_builder"][1] }}
                </div>
              {% else %}
              <div class="header-node">
                {{ content["_layout_builder"][0] }}
              </div>
          <div class="content-node">
            {{ content["_layout_builder"][1] }}
          </div>
              {% endif %}
            </div>
          {% else %}
            {{ content }}
          {% endif %}
        </div>
        {% set counter = counter + 1 %}
      {% endif %}
    {% endfor %}
  </div>
</article>

